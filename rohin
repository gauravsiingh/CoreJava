Hi,

Finally the moment has arrived to say goodbye, which is never easy; especially when I have been a part of the Bitwise family for more than 6 years. It has been a fantastic journey and a great learning experience where I have enjoyed every moment and I appreciate having had the opportunity to work with each of you with whom I have interacted.

Sincere thanks to entire DART team & my colleagues for their support and guidance to excel in my career.
It was pleasure knowing each & every one of you. 

I wish you all the very best and stay in touch.  

Below are few of the selected links which I came across and thought of sharing, it may be handy for any developer at any level to excel in their carrier. 


Unit Testing
http://www.martinfowler.com/bliki/SelfTestingCode.html
http://www.martinfowler.com/bliki/UnitTest.html
http://www.thoughtworks.com/insights/blog/guidelines-structuring-automated-tests
http://c2.com/cgi/wiki?ArrangeActAssert
http://www.martinfowler.com/bliki/AssertionFreeTesting.html
http://www.thoughtworks.com/insights/blog/write-better-tests-5-steps
http://www.martinfowler.com/articles/nonDeterminism.html
http://www.martinfowler.com/tags/testing.html
        
Pair Programming
http://martinfowler.com/bliki/PairProgrammingMisconceptions.html
http://agilerichmond.com/attachments/article/82/Pair%20Programming%20Handout.pdf

Refactoring
https://www.youtube.com/watch?v=vqEg37e4Mkw
http://martinfowler.com/articles/workflowsOfRefactoring/
https://www.youtube.com/watch?v=vqEg37e4Mkw

Code Smells
http://martinfowler.com/bliki/CodeSmell.html
http://www.industriallogic.com/wp-content/uploads/2005/09/smellstorefactorings.pdf

OO Concepts and Design
http://www.objectmentor.com/resources/articles/inheritanceVsDelegation
http://www.objectmentor.com/resources/articles/ocp.pdf
http://www.objectmentor.com/resources/articles/Principles_and_Patterns.pdf
http://martinfowler.com/articles/designDead.html

Mocking (TestDouble)
http://gojko.net/2009/10/23/mockito-in-six-easy-examples/
http://docs.mockito.googlecode.com/hg/latest/org/mockito/Mockito.html
https://code.google.com/p/powermock/
http://martinfowler.com/articles/mocksArentStubs.html
http://martinfowler.com/articles/modernMockingTools.html
http://martinfowler.com/articles/injection.html

Functional Testing
https://code.google.com/p/selenium/wiki/GettingStarted
https://selenium-release.storage.googleapis.com/2.42/selenium-server-standalone-2.42.2.jar

Good Reads
http://martinfowler.com/articles/useOfMetrics.html
http://www.javaworld.com/article/2073723/core-java/why-getter-and-setter-methods-are-evil.html
http://www.javaworld.com/article/2072302/core-java/more-on-getters-and-setters.html
http://martinfowler.com/ieeeSoftware/coupling.pdf


Books Must Read  Refactoring,  Test Driven Development

Commenting code does it make sense!!
https://blog.codinghorror.com/coding-without-comments/

Some hilarious comments found in code 
http://stackoverflow.com/questions/184618/what-is-the-best-comment-in-source-code-you-have-ever-encountered

POJO vs. NOJO (All about the misunderstanding)
http://puttingtheteaintoteam.blogspot.in/2008/10/utils-classes-and-nojos.html
http://www.martinfowler.com/bliki/POJO.html (the one who coined the term)

A complete example with OO design guidelines
https://github.com/priyaaank/MarsRover (Check the blog links with the source code)

My Java blog (will be posting more on coding and other standards soon)
http://novice2wise.blogspot.in/ (Can check ENUM blog and CI blog for now)

Amazing series of blog’s on OO design
http://priyaaank.tumblr.com/post/95095165285/decoding-thoughtworks-coding-problems

This link contains a series of links pointing to blogs which can help to make your basics super strong. A step towards being a strong programmer.
https://shirishpadalkar.wordpress.com/2014/05/30/recommended-reading-developers-interview-at-thoughtworks/

Stay in touch with technology, get the reviews by the experienced developers, Architects and scientists on this link  
https://www.thoughtworks.com/radar 

For Developers interested in functional programming.

Scala and Functional Programming from basics to advance… sure you’ll just enjoy reading these. 
These are the best books In which you can invest.
http://underscore.io/training/courses/essential-scala/  (Basic)
http://www.amazon.in/Functional-Programming-Scala-Paul-Chiusano/dp/1617290653 (Intermediate)
http://underscore.io/training/courses/advanced-scala/ (Advance)

Haskell getting familiar 
https://www.youtube.com/watch?v=AOl2y5uW0mA&list=PLtRG9GLtNcHBv4cuh2w1cz5VsgY6adoc3
http://learnyouahaskell.com/chapters
best book so far I took on Haskell http://haskellbook.com/

Nice blogs on Haskell by Gabriel Gonzalez  http://www.haskellforall.com/ 

Get all the papers published by Simon Peton jones one of the creator of GHC
http://research.microsoft.com/en-us/um/people/simonpj/Papers/papers.html

Category theory Lectures for programmers (very interesting) - Bartosz Milewski 
https://www.youtube.com/watch?v=I8LbkfSSR58&list=PLbgaMIhjbmEnaH_LTkxLI7FMa2HsnawM_

PS: Please share to the needy  , you can connect with me on twitter @rohinpp,  linkedin (Rohin Patel), github with user rohinp, email rohin.patel@outlook.com and mobile 9049362452. 

jwtApiCommon - contains common functions for utility methods
jwtApiClient - used by consumers to get xxx Gateway issued JWT token
jwtApiAuthFilter - contains 2 J2EE filters used by providers. 1st filter GatewayJwtAuthentication filter authenticates the JWT token presented by the consumer and 2nd ApplicationScopeValidation filter performs authorization over API uri and HTTP verb.

Flow of events
1. Consumer generates HS256 token and validates it with the gateway.
2. After successfull validation of the HS256 token from the consumer the gateway issues a RS256 token back signing it with its private key.
3. The consumer can use the token to hit the secure service using HTTPS.
4. If the services are secure the by the 2 filters then the consumers RS256 token will be authenticated by the GatewayJwtAuthenticationFilter and its claims will be used by the ApplicationScopeValidationFilter to authorize it at coarsed grained.

A JWT token consists of the following 3 parts
1) header - A header is of the following form {typ: "JWT", alg: "HS256"} denoting the type of the header (default is JWT), and the algorithm used. The JSON header is encoded using base64 and is represented as Base64UrlSafeEncoder(header)
2) claims - claims is JSON object of the following form (iss:"issuer of the token generally the client or the gateway",sub:"generally the client api key used to identify the client",exp:"expiry time is seconds")
3) signature - signature is the result of signing Base64UrlSafeEncoded(header).Base64UrlSafeEncoded(claims) with HS256 or RS256.

The JWT token is presented in its serialization form which is constructed using all the 3 fields (header claims and signature separated by .(dots))
